scriptencoding utf-8

let g:python_host_prog = '/usr/bin/python2'
let g:python3_host_prog = '/usr/bin/python'

" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
if empty(glob('~/.config/nvim/autoload/plug.vim'))
	silent !curl -fLo ~/.config/nvim/autoload/plug.vim --create-dirs
		\ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
	autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin('~/.vim/plugged')

" vim-sensible
Plug 'https://github.com/tpope/vim-sensible'

" Line up a certain character in each line
Plug 'https://github.com/junegunn/vim-easy-align.git'

" A git UI plugin
Plug 'https://github.com/tpope/vim-fugitive.git'

" Pop-up file manager
Plug 'https://github.com/scrooloose/nerdtree.git'
Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin.git'

" Map F2 to NERDTreeToggle
map <F2> :NERDTreeToggle<CR>

let g:NERDTreeIndicatorMapCustom = {
    \ "Modified"  : "*",
    \ "Staged"    : "+",
    \ "Untracked" : "-",
    \ "Renamed"   : "/",
    \ "Unmerged"  : "=",
    \ "Deleted"   : "x",
    \ "Dirty"     : "*",
    \ "Clean"     : "`",
    \ "Unknown"   : "?"
    \ }

let g:NERDTreeIgnore = ['\.pyc$', '\.o$', '\.lib$', '\.a$', '\.dll$', '\.so$', '\.so\.', '\.dylib$', '\.exe$', '\.out$', '\.app$', '\.stackdump$']

" Colour scheme
"Plug 'https://github.com/altercation/vim-colors-solarized.git'
Plug 'https://github.com/frankier/neovim-colors-solarized-truecolor-only.git'

" Add quotes, html tags, etc. around something
Plug 'https://github.com/tpope/vim-surround.git'

" Commenting/uncommenting stuff
Plug 'https://github.com/tpope/vim-commentary.git'

" Consistent editing styles (indent, etc)
Plug 'https://github.com/editorconfig/editorconfig-vim.git'

" Lets you refactor multiple things with ctrl-n
Plug 'terryma/vim-multiple-cursors'

" Open a file to a specific line with 'vim file:line'
Plug 'bogado/file-line'

" Fast fuzzy searching
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'
set rtp+=~/.fzf
" map <C-F> :FZF +c -m -x<cr>
map <C-F> :FzfPreviewMruFiles <cr>
Plug 'yuki-ycino/fzf-preview.vim'
let g:fzf_preview_command = 'ccat --color=always {-1}' " Installed ccat
let g:fzf_preview_use_dev_icons = 1
let g:fzf_preview_filelist_postprocess_command = 'xargs -d "\n" exa --color=always'

" devicons
Plug 'ryanoasis/vim-devicons'

" track mru files
Plug 'Shougo/neomru.vim'

" Start Screen
Plug 'mhinz/vim-startify'

" Deal with trailing whitespace
Plug 'ntpeters/vim-better-whitespace'
map <leader>s :StripWhitespace<CR>

" Highlight indent levels
Plug 'nathanaelkane/vim-indent-guides'
map <C-I> :IndentGuidesToggle<cr>

" Let the '.' command work with other plugins
Plug 'tpope/vim-repeat'

" Colour scheme
Plug 'chriskempson/base16-vim'

" Asynchronous support
Plug 'Shougo/vimproc.vim', {'do' : 'make'}

" Asynchronous auto-complete
" See: https://github.com/Shougo/deoplete.nvim/blob/master/doc%2Fdeoplete.txt
Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
Plug 'zchee/deoplete-jedi'
Plug 'ternjs/tern_for_vim', { 'do': 'npm install' }
let g:deoplete#enable_at_startup = 1
let g:airline#extensions#tabline#enabled = 1
let g:deoplete#enable_ignore_case = 1
let g:deoplete#auto_complete_start_length = 0
set completeopt+=preview,
let g:auto_complete_start_length = 0
let g:deoplete#enable_refresh_always = 1
let g:deoplete#enable_debug = 0
let g:deoplete#enable_profile = 0


" Fancy status bar
" I *think* this causes serious slowdown, so I'm disabling for now
"Plug 'vim-airline/vim-airline'
"Plug 'vim-airline/vim-airline-themes'

" Another elegant statusline for vim, extracted from space-vim.
Plug 'liuchengxu/eleline.vim'
set laststatus=2
let g:eleline_powerline_fonts = 1
" let g:eleline_slim = 1


" Syntax checking
" Plug 'scrooloose/syntastic'
" set statusline+=%#warningmsg#
" set statusline+=%{SyntasticStatuslineFlag()}
" set statusline+=%*

" let g:syntastic_always_populate_loc_list = 1
" let g:syntastic_auto_loc_list = 1
" let g:syntastic_check_on_open = 0
" let g:syntastic_check_on_wq = 0
" let g:syntastic_rust_checkers = ['cargo']
" let g:syntastic_python_checkers = ['flake8']

Plug 'neomake/neomake'
let g:neomake_javascript_enabled_makers = ['eslint']
let g:neomake_python_enabled_makers = ['pylint']
let g:neomake_sh_enabled_makers = ['shellcheck']
" let g:neomake_open_list = 2

" Lint
Plug 'ynkdir/vim-vimlparser'
Plug 'syngan/vim-vimlint'

" Fuzzy finder in neovim floating window
" The do hook is highly recommended.
" It will try to build all the optional dependency if cargo exists on your system.
Plug 'liuchengxu/vim-clap', { 'do': function('clap#helper#build_all') }
map <C-P> :Clap <cr>

" snippets
Plug 'honza/vim-snippets'
Plug 'SirVer/ultisnips'

" smart highlight
Plug 'romainl/vim-cool'

" Gist
Plug 'mattn/webapi-vim'
Plug 'mattn/gist-vim'

" Narrow Region
Plug 'chrisbra/NrrwRgn'
map <leader>r :NarrowRegion<CR>

" Jump to a specific character
Plug 'easymotion/vim-easymotion'

" TUI
Plug 'skywind3000/vim-quickui'

" Set up Gundo.vim -- vim-mundo, fork with neovim support
Plug 'simnalamburt/vim-mundo'

" Enable persistent undo so that undo history persists across vim sessions
set undofile
set undodir=~/.vim/undo
nnoremap <F5> :MundoToggle<CR>
let g:mundo_right = 1

" Better :terminal commands
Plug 'mklabs/split-term.vim'
set splitright
set splitbelow
let g:disable_key_mappings = 1
let g:split_term_vertical = 1

" Fix lag in Ruby
Plug 'vim-ruby/vim-ruby'
let g:ruby_no_expensive=1

" Syntax highlighting
Plug 'mustache/vim-mustache-handlebars'
Plug 'dag/vim-fish'
Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'
Plug 'sheerun/vim-polyglot'
let g:mustache_abbreviations = 1

" Code Formatting
Plug 'sbdchd/neoformat'
let g:neoformat_enabled_python = ['yapf', 'autopep8']
let g:neoformat_enabled_javascript = ['eslint']
let g:neoformat_enabled_bassh = ['shfmt']

" Markdown Preview
Plug 'iamcco/markdown-preview.nvim', { 'do': { -> mkdp#util#install() } }
let g:mkdp_browser = 'qutebrowser'

Plug 'reedes/vim-pencil'

" Makrdown Tables
Plug 'dhruvasagar/vim-table-mode'
let g:table_mode_corner='|'

" Smooth scrolling - totally optional
Plug 'psliwka/vim-smoothie'

" ansible
Plug 'pearofducks/ansible-vim', { 'do': './UltiSnips/generate.sh' }

call plug#end()

" Colours
set termguicolors
set background=dark
colorscheme base16-phd

" Relative line numbers
au BufReadPost * set relativenumber
au BufReadPost * set number

" groups of letters with dashes as words
set iskeyword +=-
set binary

" Disable highlight
nnoremap <leader><space> :noh<CR>

" Re-wrap text
nnoremap <leader>j       gqap
nnoremap <leader>w       :set wrap linebreak nolist<CR>
nnoremap <leader>h       :TOhtml<CR>

" Set up proper wrapping
set wrap
set linebreak

" Spelling
set spell

" Map <leader>r to NarrowRegion
map <leader>r :NarrowRegion<CR>

" Set backspace to not go beyond the new insert, but to go over autoindent and
" end of lines
" set backspace=eol,indent
set backspace=2

" Instead of failing because a file isn't saved, prompt to save the file
set confirm

" Blink instead of beep
set visualbell

" Tabstops
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab

" Smart search
set ignorecase
set smartcase

" Show lines above and below the cursor when scrolling
set scrolloff=4

" Don't automatically comment the next line
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o
autocmd BufNewFile,BufRead *.js.erb set ft=javascript.eruby
autocmd BufNewFile,BufRead *.html.erb set ft=html.eruby
autocmd BufNewFile,BufRead *.html.haml set ft=haml
autocmd BufNewFile,BufRead *.ctp set ft=php.html
autocmd BufNewFile,BufRead *.md set ft=markdown
autocmd BufNewFile,BufRead *.hbs set ft=handlebars.html
autocmd BufNewFile,BufRead *.rss setfiletype xml
autocmd BufNewFile,BufRead .envrc set ft=zsh
autocmd BufNewFile,BufRead .envrc-sample set ft=zsh

" Auto-complete for :commands in vim
set wildmenu                    " Show list instead of just completing
set wildmode=list:longest,full  " Command <Tab> completion, list matches, then longest common part, then all.

" Show cursor-position information
set ruler

" Don't add multiple spaces on a join
set nojoinspaces

" Don't scroll all the way left on pgup/pgdn
set nostartofline

" Improved regex
set magic

" Highlight the 80th column
set colorcolumn=80

" Find merge conflict markers
map <leader>fc /\v^[<\|=>]{7}( .*\|$)<CR>
nnoremap <silent> <leader>q gwip

" Make the clipboard work
function! ClipboardYank()
  call system('xclip -i -selection clipboard', @@)
endfunction
function! ClipboardPaste()
  let @@ = system('xclip -o -selection clipboard')
endfunction

" Disable the mouse
set mouse=c

" Return to the same spot in the file that we were at
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal! g'\"" | endif
endif

" Re-map ctrl-h/j/k/l to move around in normal mode
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" Re-map ctrl-h/j/k/l to move around in terminal mode
tnoremap <C-h> <C-\><C-n><C-w>h
tnoremap <C-j> <C-\><C-n><C-w>j
tnoremap <C-k> <C-\><C-n><C-w>k
tnoremap <C-l> <C-\><C-n><C-w>l

" Make ctrl-w escape insert mode
tnoremap <C-w> <C-\><C-n><C-w>
inoremap <C-w> <esc><C-w>

" Let <enter> enter insert mode (helpful for terminals)
nnoremap <return> i

" treat long lines as break lines (useful when moving around in them)
nnoremap k gk
nnoremap gk k
nnoremap j gj
nnoremap gj j
nnoremap <up> g<up>
nnoremap <down> g<down>

" set guifont just in case ginit.vim isn't loaded ( e.g. gnvim )
set guifont=Fira\ Code\ Medium:h13

" clear all the menus
call quickui#menu#reset()

" install a 'File' menu, use [text, command] to represent an item.
call quickui#menu#install('&File', [
            \ [ "&New File\tCtrl+n", 'echo 0' ],
            \ [ "&Open File\t(F3)", 'echo 1' ],
            \ [ "&Close", 'echo 2' ],
            \ [ "--", '' ],
            \ [ "&Save\tCtrl+s", 'echo 3'],
            \ [ "Save &As", 'echo 4' ],
            \ [ "Save All", 'echo 5' ],
            \ [ "--", '' ],
            \ [ "E&xit\tAlt+x", 'echo 6' ],
            \ ])

" items containing tips, tips will display in the cmdline
call quickui#menu#install('&Edit', [
            \ [ '&Copy', ':yank', ':yank' ],
            \ [ '&Paste', ':put', ':put' ],
            \ [ '&Find', ':Clap grep', 'start vim-clap ui' ],
            \ ])

" script inside %{...} will be evaluated and expanded in the string
call quickui#menu#install("&Option", [
			\ ['Set &Spell %{&spell? "Off":"On"}', 'set spell!'],
			\ ['Set &Cursor Line %{&cursorline? "Off":"On"}', 'set cursorline!'],
			\ ['Set &Paste %{&paste? "Off":"On"}', 'set paste!'],
			\ ])

" script inside %{...} will be evaluated and expanded in the string
call quickui#menu#install("&Tools", [
			\ ['Toggle NERDTree', ':NERDTreeToggle'],
      \ [ 'Clap', ':Clap', 'start vim-clap ui' ],
      \ [ 'MarkdownPreview', ':MarkdownPreviewToggle' , 'toggle MarkdownPreview' ],
			\ ])

" script inside %{...} will be evaluated and expanded in the string
call quickui#menu#install("&FzfPreview", [
			\ ['FzfPreviewProjectFiles', ':FzfPreviewProjectFiles'],
			\ ['FzfPreviewGitFiles', ':FzfPreviewGitFiles'],
			\ ['FzfPreviewDirectoryFiles', ':FzfPreviewDirectoryFiles'],
			\ ['FzfPreviewGitStatus', ':FzfPreviewGitStatus'],
			\ ['FzfPreviewBuffers', ':FzfPreviewBuffers'],
			\ ['FzfPreviewProjectOldFiles', ':FzfPreviewProjectOldFiles'],
			\ ['FzfPreviewProjectMruFiles', ':FzfPreviewProjectMruFiles'],
			\ ['FzfPreviewProjectGrep', ':FzfPreviewProjectGrep'],
			\ ['FzfPreviewOldFiles', ':FzfPreviewOldFiles'],
			\ ['FzfPreviewMruFiles', ':FzfPreviewMruFiles'],
			\ ['FzfPreviewFromResources', ':FzfPreviewFromResources'],
			\ ])

" register HELP menu with weight 1000
call quickui#menu#install('H&elp', [
			\ ["&Cheatsheet", 'help index', ''],
			\ ['T&ips', 'help tips', ''],
			\ ['--',''],
			\ ["&Tutorial", 'help tutor', ''],
			\ ['&Quick Reference', 'help quickref', ''],
			\ ['&Summary', 'help summary', ''],
			\ ], 10000)

" enable to display tips in the cmdline
let g:quickui_show_tip = 1

" hit space twice to open menu
noremap <space><space> :call quickui#menu#open()<cr>

let g:quickui_color_scheme = 'solarized'

" Full config: when writing or reading a buffer, and on changes in insert and
" normal mode (after 500ms; no delay when writing).
call neomake#configure#automake('nrwi', 500)

" oldfiles uses viminfo, but the default setting is 100
" Change the number by setting it in viminfo with a single quote.
" Ref: viminfo-'
set viminfo='1000
